<launch>
  <arg name="sensor_name" default="Astra" doc="D435|D455|L515|LIPSDL|&#x0A;
            Xtion2|&#x0A;
            Structure|Kinect|Kinect2|Azure|&#x0A;
            Astra|Vzense|ZED|ZED2|ZED2i" />

  <arg name="throttle_p" default="1" />
  <arg name="throttle_fps" default="4" />

  <!--
  <arg name="exp_distance" default="-1000.0" />

  <arg name="record_p" default="0" />

  <arg name="dirname_data" default="$(env PWD)/Data" />
  <arg name="record_delay" default="10.0" />
  <arg name="dirname_data" default="/media/ysumi/LaCie/Data" />

  <node name="exp_setup" pkg="emulated_srs" type="experimental_setup_broadcaster.py" output="screen" cwd="node">
    <param name="sensor_name" value="$(arg sensor_name)" />
    <param name="dist_testpiece" value="$(arg exp_distance)" />
  </node>
  -->

  <group ns="sensing_unit">
    <group if="$(eval sensor_name=='D435' or
                  sensor_name=='D455' or
                  sensor_name=='L515')">

      <remap from="/sensing_unit/camera/aligned_depth_to_color/image_raw"
              to="/sensing_unit/camera/depth_registered/image_rect" />
      <remap from="/sensing_unit/camera/color/camera_info"
              to="/sensing_unit/camera/rgb/camera_info" />
      <remap from="/sensing_unit/camera/color/image_rect_color"
              to="/sensing_unit/camera/rgb/image_rect_color" />
      
      <!--
      <remap from="/sensing_unit/camera/depth_registered/points"
              to="/sensing_unit/depth_registered/points" />
      -->

      <include file="$(find realsense2_camera)/launch/rs_rgbd.launch">
        <arg name="align_depth" value="true" />
        <arg name="depth_width" value="640" />
        <arg name="depth_height" value="480" />
        <arg name="color_width" value="640" />
        <arg name="color_height" value="480" />
        <arg name="depth_fps" value="15" />
        <arg name="color_fps" value="15" />
      </include>

      <!--      
      <node pkg="nodelet" type="nodelet" name="nodelet_manager" args="manager" />
      <node pkg="nodelet" type="nodelet" name="nodelet1" args="load depth_image_proc/point_cloud_xyzrgb nodelet_manager">
        <remap from="rgb/camera_info" to="camera/rgb/camera_info"/>
        <remap from="depth_registered/image_rect" to="camera/depth_registered/image_rect"/>
        <remap from="rgb/image_rect_color" to="camera/rgb/image_rect_color"/>
        <remap from="depth_registered/points" to="camera/depth_registered/apoints"/>
      </node>        
      -->

    </group>

    <group if="$(eval sensor_name=='Structure')">
      <!--
      <remap from="/sensing_unit/camera/aligned_depth_to_color/image_raw" to="/sensing_unit/depth_registered/image_rect" /> 
      <remap from="/sensing_unit/camera/color/camera_info" to="/sensing_unit/rgb/camera_info" />
      <remap from="/sensing_unit/camera/color/image_rect_color" to="/sensing_unit/rgb/image_rect_color" />
      -->

      <remap from="/sensing_unit/camera/depth/points"
              to="/sensing_unit/camera/depth_registered/points" />

      <include file="$(find openni2_launch)/launch/openni2.launch" />

    </group>

    <group if="$(eval sensor_name=='Astra')">
      <!-- 
      <remap from="/sensing_unit/camera/depth_registered/image_raw" to="/sensing_unit/depth_registered/image_rect" />
      <remap from="/sensing_unit/camera/rgb/camera_info" to="/sensing_unit/rgb/camera_info" />
      <remap from="/sensing_unit/camera/rgb/image_rect_color" to="/sensing_unit/rgb/image_rect_color" />
      <remap from="/sensing_unit/camera/depth_registered/points" to="/sensing_unit/depth_registered/points" />
      -->

      <include file="$(find astra_camera)/launch/astra.launch" />

    </group>

    <group if="$(eval sensor_name=='Kinect')">
      <!-- 
      <remap from="/sensing_unit/camera/depth/image_rect_raw" to="/sensing_unit/depth_registered/image_rect" />
      <remap from="/sensing_unit/camera/rgb/camera_info" to="/sensing_unit/rgb/camera_info" />
      <remap from="/sensing_unit/camera/rgb/image_rect_color" to="/sensing_unit/rgb/image_rect_color" />

      <remap from="/sensing_unit/camera/depth_registered/points" to="/sensing_unit/depth_registered/points" />
      -->

      <include file="$(find freenect_launch)/launch/freenect.launch" />
    </group>

    <group if="$(eval sensor_name=='Kinect2')">
      <!-- 
      <remap from="/sensing_unit/kinect2/sd" to="/sensing_unit/depth_registered" /> 
      <remap from="/sensing_unit/kinect2/qhd/image_depth_rect" to="/sensing_unit/depth_registered/image_rect" /> 
      <remap from="/sensing_unit/kinect2/qhd/camera_info" to="/sensing_unit/rgb/camera_info" />
      <remap from="/sensing_unit/kinect2/qhd/image_color_rect" to="/sensing_unit/rgb/image_rect_color" />
      <remap from="/sensing_unit/kinect2/sd/points" to="/sensing_unit/depth_registered/points" />
      <remap from="/sensing_unit/kinect2/qhd/image_color_rect" to="/sensing_unit/rgb/image_rect_color" />
      <remap from="/sensing_unit/kinect2/qhd/camera_info" to="/sensing_unit/rgb/camera_info" />
      <remap from="/sensing_unit/kinect2/sd/camera_info" to="/sensing_unit/depth_registered/camera_info" />
      <remap from="/sensing_unit/kinect2/sd/image_color_rect" to="/sensing_unit/depth_registered/image_color_rect" />
      <remap from="/sensing_unit/kinect2/sd/image_depth" to="/sensing_unit/depth_registered/image_depth" />
      <remap from="/sensing_unit/kinect2/sd/image_depth_rect" to="/sensing_unit/depth_registered/image_depth_rect" />
      <remap from="/sensing_unit/kinect2/sd/image_ir" to="/sensing_unit/depth_registered/image_ir" />                
      <remap from="/sensing_unit/kinect2/sd/image_ir_rect" to="/sensing_unit/depth_registered/image_ir_rect" />      
      <remap from="/sensing_unit/kinect2/sd/image_color_rect/compressed" to="/sensing_unit/depth_registered/image_color_rect/compressed" />
      <remap from="/sensing_unit/kinect2/sd/image_depth/compressed" to="/sensing_unit/depth_registered/image_depth/compressed" />
      <remap from="/sensing_unit/kinect2/sd/image_depth_rect/compressed" to="/sensing_unit/depth_registered/image_depth_rect/compressed" />
      <remap from="/sensing_unit/kinect2/sd/image_ir/compressed" to="/sensing_unit/depth_registered/image_ir/compressed" />                
      <remap from="/sensing_unit/kinect2/sd/image_ir_rect/compressed" to="/sensing_unit/depth_registered/image_ir_rect/compressed" />                
      -->

      <remap from="/sensing_unit/kinect2/sd/points" to="/sensing_unit/camera/depth_registered/points" />
      <remap from="/sensing_unit/kinect2/qhd/image_color_rect" to="/sensing_unit/camera/rgb/image_rect_color" />

      <include file="$(find kinect2_bridge)/launch/kinect2_bridge.launch">
        <arg name="publish_tf" value="true" />
      </include>

    </group>

    <group if="$(eval sensor_name=='Azure')">

      <remap from="/sensing_unit/depth_to_rgb/image_raw" to="/sensing_unit/camera/depth_registered/image_rect" />
      <remap from="/sensing_unit/depth_to_rgb/camera_info" to="/sensing_unit/camera/rgb/camera_info" />
      <remap from="/sensing_unit/rgb/image_raw" to="/sensing_unit/camera/rgb/image_rect_color" />

      <include file="$(find azure_kinect_ros_driver)/launch/driver.launch">
        <!--  <arg name="depth_mode" value="NFOV_2X2BINNED" /> -->
        <arg name="color_resolution" value="720P" />
      </include>

      <node pkg="nodelet" type="nodelet" name="standalone_nodelet" args="manager" output="screen"/>
      <node pkg="nodelet" type="nodelet" name="points_xyzrgb" args="load depth_image_proc/point_cloud_xyzrgb standalone_nodelet --no-bond">
        <!-- 
        <remap from="rgb/camera_info" to="depth_to_rgb/camera_info" />  
        <remap from="rgb/image_rect_color" to="rgb/image_raw"/>  
        <remap from="depth_registered/image_rect" to="depth_to_rgb/image_raw"/>  
        <remap from="depth_registered/points" to="camera/depth_registered/points"/>
        -->
        <remap from="rgb/camera_info" to="camera/rgb/camera_info"/>
        <remap from="depth_registered/image_rect" to="camera/depth_registered/image_rect"/>
        <remap from="rgb/image_rect_color" to="camera/rgb/image_rect_color"/>
        <remap from="depth_registered/points" to="camera/depth_registered/points"/>
      </node>
    </group>

    <group if="$(eval sensor_name=='Vzense')">

      <remap from="/sensing_unit/Vzense/aligned_depth_to_color/image_raw" to="/sensing_unit/camera/depth_registered/image_rect" />
      <remap from="/sensing_unit/Vzense/color/camera_info" to="/sensing_unit/camera/rgb/camera_info" />
      <remap from="/sensing_unit/Vzense/color/image_raw" to="/sensing_unit/camera/rgb/image_rect_color" />

      <include file="$(find vzense_camera)/launch/vzense_camera.launch">
        <arg name="rgb_resolution" value="2" />
        <!-- 640x480 -->
        <arg name="depth_range" value="2" />
        <!-- 4.4m -->
      </include>

      <node pkg="nodelet" type="nodelet" name="nodelet_manager" args="manager" />
      <node pkg="nodelet" type="nodelet" name="nodelet1" args="load depth_image_proc/point_cloud_xyzrgb nodelet_manager --no-bond">
        <!--
        <remap from="rgb/camera_info" to="Vzense/color/camera_info"/>
        <remap from="depth_registered/image_rect" to="Vzense/aligned_depth_to_color/image_raw"/>
        <remap from="rgb/image_rect_color" to="Vzense/color/image_raw"/>    
        <remap from="depth_registered/points" to="camera/depth_registered/points"/>
        -->
        <remap from="rgb/camera_info" to="camera/rgb/camera_info"/>
        <remap from="depth_registered/image_rect" to="camera/depth_registered/image_rect"/>
        <remap from="rgb/image_rect_color" to="camera/rgb/image_rect_color"/>
        <remap from="depth_registered/points" to="camera/depth_registered/points"/>        
      </node>
    </group>

    <group if="$(eval sensor_name=='ZED')">
      <!-- -->
      <remap from="/sensing_unit/zed/zed_node/depth/depth_registered" to="/sensing_unit/camera/depth_registered/image_rect" />
      <remap from="/sensing_unit/zed/zed_node/rgb/camera_info" to="/sensing_unit/camera/rgb/camera_info" />
      <remap from="/sensing_unit/zed/zed_node/rgb/image_rect_color" to="/sensing_unit/camera/rgb/image_rect_color" />
      <!-- -->
      <include file="$(find zed_wrapper)/launch/zed.launch" />

      <node pkg="nodelet" type="nodelet" name="nodelet_manager" args="manager" />

      <node pkg="nodelet" type="nodelet" name="nodelet1" args="load depth_image_proc/point_cloud_xyzrgb nodelet_manager">
        <!--
        <remap from="rgb/camera_info" to="zed/zed_node/rgb/camera_info"/>
        <remap from="depth_registered/image_rect" to="zed/zed_node/depth/depth_registered"/>
        <remap from="rgb/image_rect_color" to="zed/zed_node/rgb/image_rect_color"/>
        <remap from="depth_registered/points" to="camera/depth_registered/points"/>
        -->
        <remap from="rgb/camera_info" to="camera/rgb/camera_info"/>
        <remap from="depth_registered/image_rect" to="camera/depth_registered/image_rect"/>
        <remap from="rgb/image_rect_color" to="camera/rgb/image_rect_color"/>
        <remap from="depth_registered/points" to="camera/depth_registered/points"/>                
      </node>
    </group>

    <group if="$(eval sensor_name=='ZED2')">
      <remap from="/sensing_unit/zed2/zed_node/depth/depth_registered" to="/sensing_unit/camera/depth_registered/image_rect" />
      <remap from="/sensing_unit/zed2/zed_node/rgb/camera_info" to="/sensing_unit/camera/rgb/camera_info" />
      <remap from="/sensing_unit/zed2/zed_node/rgb/image_rect_color" to="/sensing_unit/camera/rgb/image_rect_color" />

      <include file="$(find zed_wrapper)/launch/zed2.launch" />

      <node pkg="nodelet" type="nodelet" name="nodelet_manager" args="manager" />
      <node pkg="nodelet" type="nodelet" name="nodelet1" args="load depth_image_proc/point_cloud_xyzrgb nodelet_manager --no-bond">
        <!--
        <remap from="rgb/camera_info" to="zed2/zed_node/rgb/camera_info"/>
        <remap from="depth_registered/image_rect" to="zed2/zed_node/depth/depth_registered"/>
        <remap from="rgb/image_rect_color" to="zed2/zed_node/rgb/image_rect_color"/>
        <remap from="depth_registered/points" to="camera/depth_registered/points"/>
        -->
        <remap from="rgb/camera_info" to="camera/rgb/camera_info"/>
        <remap from="depth_registered/image_rect" to="camera/depth_registered/image_rect"/>
        <remap from="rgb/image_rect_color" to="camera/rgb/image_rect_color"/>
        <remap from="depth_registered/points" to="camera/depth_registered/points"/>                
      </node>
    </group>

    <group if="$(eval sensor_name=='ZED2i')">
      <remap from="/sensing_unit/zed2i/zed_node/depth/depth_registered" to="/sensing_unit/camera/depth_registered/image_rect" />
      <remap from="/sensing_unit/zed2i/zed_node/rgb/camera_info" to="/sensing_unit/camera/rgb/camera_info" />
      <remap from="/sensing_unit/zed2i/zed_node/rgb/image_rect_color" to="/sensing_unit/camera/rgb/image_rect_color" />

      <include file="$(find zed_wrapper)/launch/zed2i.launch" />

      <node pkg="nodelet" type="nodelet" name="nodelet_manager" args="manager" />
      <node pkg="nodelet" type="nodelet" name="nodelet1" args="load depth_image_proc/point_cloud_xyzrgb nodelet_manager --no-bond">
        <!--
        <remap from="rgb/camera_info" to="zed2i/zed_node/rgb/camera_info"/>
        <remap from="depth_registered/image_rect" to="zed2i/zed_node/depth/depth_registered"/>
        <remap from="rgb/image_rect_color" to="zed2i/zed_node/rgb/image_rect_color"/>
        <remap from="depth_registered/points" to="camera/depth_registered/points"/>
        -->
        <remap from="rgb/camera_info" to="camera/rgb/camera_info"/>
        <remap from="depth_registered/image_rect" to="camera/depth_registered/image_rect"/>
        <remap from="rgb/image_rect_color" to="camera/rgb/image_rect_color"/>
        <remap from="depth_registered/points" to="camera/depth_registered/points"/>                
      </node>
    </group>

    <group if="$(eval sensor_name=='LIPSDL')">
      <!--
      <remap from="/sensing_unit/camera/aligned_depth_to_color/image_raw" to="/sensing_unit/depth_registered/image_rect" /> 
      <remap from="/sensing_unit/camera/color/camera_info" to="/sensing_unit/rgb/camera_info" />
      <remap from="/sensing_unit/camera/color/image_rect_color" to="/sensing_unit/rgb/image_rect_color" />
      <remap from="/sensing_unit/camera/depth_registered/points" to="/sensing_unit/depth_registered/points" />
      -->

      <include file="$(find openni2_launch)/launch/lips_DL.launch">
        <arg name="depth_registration" value="true" />
      </include>
    </group>

    <group if="$(eval sensor_name=='Xtion2')">      <!-- req: Ubuntu16.04 -->
      <!--
      <remap from="/sensing_unit/camera/aligned_depth_to_color/image_raw" to="/sensing_unit/depth_registered/image_rect" /> 
      <remap from="/sensing_unit/camera/color/camera_info" to="/sensing_unit/rgb/camera_info" />
      <remap from="/sensing_unit/camera/color/image_rect_color" to="/sensing_unit/rgb/image_rect_color" />      
      <remap from="/sensing_unit/camera/depth_registered/points" to="/sensing_unit/depth_registered/points" />
      <remap from="/sensing_unit/camera/color/camera_info" to="/sensing_unit/camera/rgb/camera_info" />      
      <remap from="/sensing_unit/camera/color/image_rect_color" to="/sensing_unit/camera/rgb/image_rect_color" />
      -->

      <include file="$(find openni2_launch)/launch/openni2.launch">
        <arg name="depth_registration" value="true" />
      </include>
    </group>

    <group if="$(arg throttle_p)">
      <node name="throttle" pkg="topic_tools" type="throttle" 
              args="messages /sensing_unit/camera/depth_registered/points $(arg throttle_fps)" />
    </group>

    <group if="$(arg throttle_p)">
      <node name="ithrottle" pkg="topic_tools" type="throttle"
              args="messages /sensing_unit/camera/rgb/image_rect_color $(arg throttle_fps)">
      </node>
    </group>

    <!--
    <group if="$(arg record_p)">
      <node name="record_points" pkg="rosbag" type="record" output="screen" args="-o $(arg dirname_data)/$(arg sensor_name) split size=4000
                  /sensing_unit/camera/depth_registered/points_throttle
                  /experimental_setup
                  /tf /tf_static" launch-prefix="bash -c 'sleep $(arg record_delay); $0 $@' ">
      </node>
    </group>
-->

  </group>

</launch>

 
