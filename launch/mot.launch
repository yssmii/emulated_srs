<launch>
  <arg name="sensor_name"
       default="D435"
       doc="D435|D455|L515|Structure|Kinect|Kinect2|Azure|&#x0A;
            Astra|Vzense|LIPSDL|ZED|ZED2|ZED2i|Xtion2"
       />

  <arg name="exp_distance" default="1000.0" />

  <!--
  <arg name="topic_name" default="/camera/depth_registered/points" />
  -->

  <arg name="record_p" default="0" />

  <arg name="fps" default="4" />

  <arg name="zkey" default="1500.0" />
  <arg name="min_gap_of_occluding_boundary" default="50.0" />
  <arg name="min_pixels_as_object" default="500" />
  <arg name="min_overlap_rate" default="0.8" />
  
  <arg name="use_mask_p" default="0" />
  <arg name="use_region_p" default="0" />
  
  <arg name="display_images_p" default="1" />
  <arg name="publish_images_p" default="0" />
  <arg name="publish_markers_p" default="0" />

  <arg name="save_images_p" default="0" />
  <arg name="dirname_log" default="Data/" />

  <arg name="filename_mask" default="MASK.png" />
  <arg name="filename_region" default="Reg.png" />
  
  <group ns="sensing_unit">
    <group if="$(eval sensor_name=='D435' or 
                       sensor_name=='D455' or
                       sensor_name=='L515')" >
  <!--
      <include file="$(find realsense2_camera)/launch/rs_rgbd.launch"/>
  -->
      <include file="$(find realsense2_camera)/launch/rs_rgbd.launch">
        <arg name="align_depth" value="true" />
        <arg name="depth_width" value="1280" />
        <arg name="depth_height" value="720" />
        <arg name="depth_fps" value="15" />
        <arg name="color_width" value="1280" />
        <arg name="color_height" value="720" />
        <arg name="color_fps" value="15" />
      </include>
    </group>
    
    <group if="$(eval sensor_name=='Structure')">
      <remap from="/sensing_unit/camera/depth/points"
             to="/sensing_unit/camera/depth_registered/points" />
      <include file="$(find openni2_launch)/launch/openni2.launch" />
    </group>
    
    <group if="$(eval sensor_name=='Astra')">
      <include file="$(find astra_camera)/launch/astra.launch" />
    </group>

    <group if="$(eval sensor_name=='Kinect')">
      <include file="$(find freenect_launch)/launch/freenect.launch" />
    </group>

    <group if="$(eval sensor_name=='Kinect2')">
      <remap from="/sensing_unit/kinect2/sd/points"
             to="/sensing_unit/camera/depth_registered/points" />
      <include file="$(find kinect2_bridge)/launch/kinect2_bridge.launch">
        <arg name="publish_tf" value="true" />
      </include>
    </group>

    <group if="$(eval sensor_name=='Azure')">
      <include file="$(find azure_kinect_ros_driver)/launch/driver.launch">
        <arg name="color_resolution" value="720P" />
      </include>
      <node pkg="nodelet" type="nodelet" name="standalone_nodelet" args="manager" output="screen"/>
      <node pkg="nodelet" type="nodelet" name="points_xyzrgb" args="load depth_image_proc/point_cloud_xyzrgb standalone_nodelet --no-bond">
        <remap from="rgb/camera_info" to="depth_to_rgb/camera_info" />  
        <remap from="rgb/image_rect_color" to="rgb/image_raw"/>  
        <remap from="depth_registered/image_rect" to="depth_to_rgb/image_raw"/>  
        <remap from="depth_registered/points" to="camera/depth_registered/points"/>
      </node>
    </group>

    <group if="$(eval sensor_name=='Vzense')">
      <include file="$(find vzense_camera)/launch/vzense_camera.launch">
        <arg name="rgb_resolution" value="2" /> <!-- 640x480 -->
        <arg name="depth_range" value="2" /> <!-- 4.4m -->
      </include>
      
      <node pkg="nodelet" type="nodelet" name="nodelet_manager" args="manager" />

      <node pkg="nodelet" type="nodelet" name="nodelet1"
            args="load depth_image_proc/point_cloud_xyzrgb nodelet_manager --no-bond">
        <remap from="rgb/camera_info" to="Vzense/color/camera_info"/>
        <remap from="depth_registered/image_rect" to="Vzense/aligned_depth_to_color/image_raw"/>
        <remap from="rgb/image_rect_color" to="Vzense/color/image_raw"/>    
        <remap from="depth_registered/points" to="camera/depth_registered/points"/>
      </node>
    </group>

    <group if="$(eval sensor_name=='ZED')">
      <!-- 
      <remap from="/sensing_unit/zed/zed_node/point_cloud/cloud_registered"
             to="/sensing_unit/camera/depth_registered/points" />
      -->
      <include file="$(find zed_wrapper)/launch/zed.launch" />

      <node pkg="nodelet" type="nodelet" name="nodelet_manager" args="manager" />

      <node pkg="nodelet" type="nodelet" name="nodelet1"
            args="load depth_image_proc/point_cloud_xyzrgb nodelet_manager --no-bond">
        <remap from="rgb/camera_info" to="zed/zed_node/rgb/camera_info"/>
        <remap from="depth_registered/image_rect" to="zed/zed_node/depth/depth_registered"/>
        <remap from="rgb/image_rect_color" to="zed/zed_node/rgb/image_rect_color"/>
        <remap from="depth_registered/points" to="camera/depth_registered/points"/>
      </node>
    </group>

    <group if="$(eval sensor_name=='ZED2')">
      <include file="$(find zed_wrapper)/launch/zed2.launch" />

      <node pkg="nodelet" type="nodelet" name="nodelet_manager" args="manager" />

      <node pkg="nodelet" type="nodelet" name="nodelet1"
            args="load depth_image_proc/point_cloud_xyzrgb nodelet_manager --no-bond">
        <remap from="rgb/camera_info" to="zed2/zed_node/rgb/camera_info"/>
        <remap from="depth_registered/image_rect" to="zed2/zed_node/depth/depth_registered"/>
        <remap from="rgb/image_rect_color" to="zed2/zed_node/rgb/image_rect_color"/>
        <remap from="depth_registered/points" to="camera/depth_registered/points"/>
      </node>
    </group>
    
    <group if="$(eval sensor_name=='ZED2i')">
      <include file="$(find zed_wrapper)/launch/zed2i.launch" />

      <node pkg="nodelet" type="nodelet" name="nodelet_manager" args="manager" />

      <node pkg="nodelet" type="nodelet" name="nodelet1"
            args="load depth_image_proc/point_cloud_xyzrgb nodelet_manager --no-bond">
        <remap from="rgb/camera_info" to="zed2i/zed_node/rgb/camera_info"/>
        <remap from="depth_registered/image_rect" to="zed2i/zed_node/depth/depth_registered"/>
        <remap from="rgb/image_rect_color" to="zed2i/zed_node/rgb/image_rect_color"/>
        <remap from="depth_registered/points" to="camera/depth_registered/points"/>
      </node>
    </group>
    
    <group if="$(eval sensor_name=='LIPSDL')">
      <include file="$(find openni2_launch)/launch/lips_DL.launch">
        <arg name="depth_registration" value="true" />
      </include>
    </group>

    <group if="$(eval sensor_name=='Xtion2')"> <!-- req: Ubuntu16.04 -->
      <include file="$(find openni2_launch)/launch/openni2.launch">
        <arg name="depth_registration" value="true" />
      </include>
    </group>
  </group>
  
  <group ns="processing_unit">
 
    <node name="throttle" pkg="topic_tools" type="throttle"
          args="messages /sensing_unit/camera/depth_registered/points
                $(arg fps)
                /processing_unit/throttle/points" />
    
    <node name="obstacle_measurer" pkg="emulated_srs" type="obstacle_measurer"
	  output="screen" cwd="node">
      <remap from="/camera/depth_registered/points"
             to="/processing_unit/throttle/points" />
      
      <param name="sensor_name" value="$(arg sensor_name)" />
      <!--
      <param name="topic_name" value="/camera/depth_registered/points" />
      <param name="topic_name" value="$(arg topic_name)" />
      -->

      <param name="dist_testpiece" value="$(arg exp_distance)" />

      <param name="use_mask_p" value="$(arg use_mask_p)" />
      <param name="use_region_p" value="$(arg use_region_p)" />
      
      <param name="zkey" value="$(arg zkey)" />
      <param name="min_gap_of_occluding_boundary"
	     value="$(arg min_gap_of_occluding_boundary)" />
      <param name="min_pixels_as_object" value="$(arg min_pixels_as_object)" />
      <param name="min_overlap_rate" value="$(arg min_overlap_rate)" />

      <param name="filename_mask" value="$(arg filename_mask)" />
      <param name="filename_region" value="$(arg filename_region)" />
      <param name="dirname_log" value="$(arg dirname_log)" />
      
      <param name="display_images_p" value="$(arg display_images_p)" />
      <param name="publish_images_p" value="$(arg publish_images_p)" />
      <param name="publish_markers_p" value="$(arg publish_markers_p)" />
      <param name="save_images_p" value="$(arg save_images_p)" />
    </node>

    <group if="$(arg record_p)">
      <node name="record_points" pkg="rosbag" type="record" output="screen"
            args="-o $(env PWD)/$(arg sensor_name)
                  --split --size=4000
                  /camera/depth_registered/points
                  /emulated_srs/obstacle
                  /emulated_srs/setup_experiment
                  /tf /tf_static">
            <remap from="/camera/depth_registered/points"
                   to="/processing_unit/throttle/points" />
      </node>
 <!--
      <node name="record_points" pkg="rosbag" type="record" output="screen"
            args="-o P
                  /camera/depth_registered/points
                  /tf /tf_static">
            <remap from="/camera/depth_registered/points"
                   to="/processing_unit/throttle/depth_registered/points" />
      </node>
      
      <node name="record_images" pkg="rosbag" type="record" output="screen"
            args="-o I
                  /tf /tf_static
                  /emulated_srs/image_depth_classified" />

      <node name="record_obstacles" pkg="rosbag" type="record" output="screen"
            args="-o O
                  /tf /tf_static
                  /emulated_srs/obstacles">
      </node>
  -->
    </group>
  </group>

 <!--
    <node name="throttle2" pkg="topic_tools" type="throttle"
          args="messages /processing_unit/throttle/depth_registered/points 4
                /bprocessing_unit/throttle2/depth_registered/points" />
  <remap from="processing_unit/camera/depth_registered/points"
             to="/camera/depth_registered/points" />
      
      <remap from="camera/depth_registered/points"
             to="~camera/depth_registered/points" />
      <remap from="/processing_unit/camera/depth_registered/points"
         to="/camera/depth_registered/points" />
  -->


</launch>

 
